openapi: 3.0.0
servers:
  - url: https://educrat-be.onrender.com/api/v1
    description: production
  - url: http://localhost:3001/api/v1
    description: development
info:
  title: Educrat
  version: 1.0.0
  description: Educrat API
paths:
  /auth/register:
    post:
      security: []
      tags:
        - auth
      description: "register user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
      responses:
        200:
          $ref: "#/components/schemas/DefaultSuccess"
        400:
          $ref: "#/components/schemas/DefaultError"
  /auth/verification:
    post:
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                token:
                  type: string
      responses:
        200:
          $ref: "#/components/schemas/DefaultSucess"
        500:
          $ref: "#/components/schemas/DefaultError"
  /auth/verification/request:
    post:
      description: "request for verification link"
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          $ref: "#/components/schemas/DefaultSuccess"
        500:
          $ref: "#/components/schemas/DefaultError"
  /auth/login:
    post:
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credentials:
                  type: string
                password:
                  type: string
      responses:
        500:
          $ref: "#/components/schemas/DefaultError"
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
  /auth/google:
    post:
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
      responses:
        500:
          $ref: "#/components/schemas/DefaultError"
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
  /auth/password/forgot:
    post:
      description: request password reset link
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        500:
          $ref: "#/components/schemas/DefaultError"
        200:
          $ref: "#/components/schemas/DefaultSuccess"
  /auth/password/reset:
    patch:
      security: []
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                token:
                  type: string
                password:
                  type: string
      responses:
        404:
          $ref: "#/components/schemas/DefaultError"
        200:
          $ref: "#/components/schemas/DefaultSuccess"
  /user:
    get:
      security:
        - bearer: []
      tags:
        - user
      responses:
        404:
          $ref: "#/components/schemas/DefaultError"
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      security:
        - bearer: []
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                biography:
                  type: string
                headline:
                  type: string
      responses:
        404:
          $ref: "#/components/schemas/DefaultError"
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /user/instructor:
    put:
      security:
        - bearer: []
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                biography:
                  type: string
                headline:
                  type: string
                socials:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "facebook/linkedin/twitter/website/youtube"
                      url:
                        type: string
      responses:
        200:
          $ref: "#/components/schemas/DefaultSuccess"
        500:
          $ref: "#/components/schemas/DefaultError"
  /user/profile-picture:
    put:
      description: "Update Profile Picture"
      tags:
        - user
      security:
        - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
      responses:
        400:
          $ref: "#/components/schemas/DefaultError"
        200:
          $ref: "#/components/schemas/DefaultSuccess"
  /user/socials:
    put:
      description: "Update User Socials"
      tags:
        - user
      security:
        - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                socials:
                  type: array
                  items:
                    properties:
                      url:
                        type: string
                      type:
                        type: string
                        example: "facebook/linkedin/twitter/website/youtube"
      responses:
        400:
          $ref: "#/components/schemas/DefaultError"
        200:
          $ref: "#/components/schemas/DefaultSuccess"
  /course/category:
    post:
      tags:
        - "course category"
      security:
        - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        500:
          $ref: "#/components/schemas/DefaultError"
        201:
          description: "Success Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseCategory"
    get:
      description: "get all categories"
      security: []
      tags:
        - "course category"
      responses:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CourseCategory"
  /course/category/{id}:
    parameters:
      - in: path
        required: true
        name: id
        schema:
          type: string
    put:
      security:
        - bearer: []
      tags:
        - "course category"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        404:
          $ref: "#/components/schemas/DefaultError"
        200:
          description: "Success Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseCategory"
    delete:
      security:
        - bearer: []
      tags:
        - "course category"
      responses:
        404:
          $ref: "#/components/schemas/DefaultError"
        200:
          $ref: "#/components/schemas/DefaultSuccess"
    get:
      security:
        - bearer: []
      tags:
        - "course category"
      responses:
        404:
          $ref: "#/components/schemas/DefaultError"
        200:
          description: "Success Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseCategory"
  /course:
    post:
      tags:
        - course
      security:
        - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                category:
                  type: string
      responses:
        400:
          $ref: "#/components/schemas/DefaultSuccess"
        201:
          description: "Success Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
  /course/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    put:
      tags:
        - course
      security:
        - bearer: []
      description: "Update Course"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                language:
                  type: string
                category:
                  type: string
                learningObjectives:
                  type: array
                  items:
                    type: string
                preRequisites:
                  type: array
                  items:
                    type: string
                complexityLevel:
                  type: string
                  example: "beginner/intermediate/expert"
      responses:
        400:
          $ref: "#/components/schemas/DefaultSuccess"
        201:
          description: "Success Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
  /course/{id}/thumbnail:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    put:
      tags:
        - course
      security:
        - bearer: []
      description: "Update Course Thumbnail"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
      responses:
        400:
          $ref: "#/components/schemas/DefaultSuccess"
        201:
          description: "Success Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
  /course/{id}/status:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    put:
      tags:
        - course
      security:
        - bearer: []
      description: "Update Course Status"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "draft/published/rejected"
      responses:
        400:
          $ref: "#/components/schemas/DefaultSuccess"
        201:
          description: "Success Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"

components:
  schemas:
    # Defaults
    DefaultSuccess:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    DefaultError:
      description: "Error"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

    # Major Schemas
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        profilePicture:
          type: string
        _id:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        socials:
          type: array
          items:
            $ref: "#/components/schemas/Socials"
    Role:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        userId:
          type: string
        _id:
          type: string
    Socials:
      type: object
      properties:
        type:
          type: string
          example: "facebook/linkedin/twitter/website/youtube"
        url:
          type: string
        userId:
          type: string
        _id:
          type: string
    CourseCategory:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        _id:
          type: string
    Course:
      type: object
      properties:
        title:
          type: string
        slug:
          type: string
        subtitle:
          type: string
        description:
          type: string
        language:
          type: string
        thumbnail:
          type: string
        learningObjectives:
          type: array
          items:
            type: string
        preRequisites:
          type: array
          items:
            type: string
        complexityLevel:
          type: string
          example: "beginner/intermdeiate/expert"
        status:
          type: string
          example: "draft/published/rejected"
        category:
          $ref: "#/components/schemas/CourseCategory"
        userId:
          $ref: "#/components/schemas/User"
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
tags:
  - name: auth
  - name: user
  - name: "course category"
